# -*- coding: utf-8 -*-
"""AprFFHir&Birch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Uzs6YMP_pYFvNku25qYP427zyb6MDQ1
"""

import pandas as pd
import numpy as np
import itertools
from sklearn.neighbors import NearestNeighbors
from matplotlib import pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import silhouette_score
import seaborn as sns
import math
from sklearn.datasets import make_blobs
from scipy.cluster import hierarchy
from scipy.cluster.hierarchy import dendrogram
from scipy.cluster.hierarchy import cut_tree
from scipy.spatial import ConvexHull

from google.colab import drive
drive.mount('/content/drive')

AprFF = pd.read_csv("/content/drive/MyDrive/NSSTC/Fires/Fires Dataset/2021_04_forestfires.csv")
AprFF.head()

scaler = MinMaxScaler()
scaler.fit(AprFF)
scaledaprff = scaler.transform(AprFF)

df_aprff = pd.DataFrame(scaledaprff)
df_aprff.head()

hc_complete = hierarchy.linkage(df_aprff, 'complete')

plt.figure(figsize=(25, 10))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('sample index')
plt.ylabel('distance')
dendrogram(
    hc_complete,
    leaf_rotation=90.,  # rotates the x axis labels
    leaf_font_size=8.,
)
plt.show()

print(cut_tree(hc_complete, n_clusters = 6).T)

labels = (cut_tree(hc_complete, n_clusters = 6))

labelspd = pd.DataFrame(labels)
labelspd

AprFF ['cluster'] = labelspd
AprFF.head()

colors = Apr.cluster

fig = plt.figure()

ax = fig.add_axes([0.1, 0.1, 1,1])

ax.scatter(AprFF['LONGITUDE'], AprFF['LATITUDE'], c=colors, edgecolors = 'black', s=50)

ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()

fig = plt.figure()

ax = fig.add_axes([4, 4, 6, 10])

ax.scatter(AprFF['LONGITUDE'], AprFF['LATITUDE'], c=colors, edgecolors = 'black', s=50)
# ax.scatter(outliers_df['LONGITUDE'], outliers_df['LATITUDE'], c=col_outliers, edgecolors = 'black', s=50)

a =  AprFF.cluster.unique()
#s=np.delete(data.DBSCAN_Clusters.unique(), np.where(a == -1))

for i in a:
    points = AprFF[ MayFF.cluster == i][['LATITUDE', 'LONGITUDE']].values

    hull = ConvexHull(points)

    vert = np.append(hull.vertices,hull.vertices[0])  # close the polygon by appending the first point at the end

    ax.plot(points[vert, 1], points[vert,0 ], '--')
    ax.fill(points[vert, 1], points[vert, 0], alpha=0.2)

ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()

MayFFscore=silhouette_score(df_aprff,AprFF.cluster)

print("AprFF:",AprFFscore)



"""BIRCH"""

# birch clustering
from numpy import unique
from numpy import where
from sklearn.datasets import make_classification
from sklearn.cluster import Birch
from matplotlib import pyplot

# define the model
model = Birch(threshold=0.01, n_clusters=6)

# fit the model
model.fit(df_aprff)

# assign a cluster to each example
yhat = model.predict(df_aprff)

# retrieve unique clusters
clusters = unique(yhat)

labelsbirch = pd.DataFrame(yhat)

AprFF ['cluster_birch'] = labelsbirch
#AprFF.head()

AprFF.to_csv(r'/content/drive/MyDrive/NSSTC/Fires/KMeans Final/MarFFHir.ipynb\AprFFBirch.csv', index=False)

AprFFscore_birch=silhouette_score(df_aprff,AprFF.cluster_birch)
print("AprFF_BIRCH:",AprFFscore_birch)