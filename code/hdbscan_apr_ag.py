# -*- coding: utf-8 -*-
"""HDBSCAN Apr Ag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WzE-vuXVj5U9cRQG-OqUekLCykE6qri_
"""

pip install hdbscan

import pandas as pd
import numpy as np
import itertools
from sklearn.neighbors import NearestNeighbors
from matplotlib import pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import DBSCAN
import hdbscan
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from scipy.spatial import ConvexHull

path = "/content/drive/MyDrive/NSSTC/Fires/Fires Dataset/2021_04_agfires.csv"

data = pd.read_csv(path)

scaler = MinMaxScaler()
scaler.fit(data)
dfs1 = scaler.transform(data)
dfs1 = pd.DataFrame(dfs1)

print(dfs1.shape)
print('------------------------------------------------')
print(dfs1.isnull().sum())
print('------------------------------------------------')
print(dfs1.describe())

clusterer = hdbscan.HDBSCAN(min_cluster_size=10, gen_min_span_tree=True)
labels = clusterer.fit(dfs1)

clusterer.minimum_spanning_tree_.plot(edge_cmap='viridis',
                                      edge_alpha=0.6,
                                      node_size=80,
                                      edge_linewidth=2)

# clusterer.single_linkage_tree_.plot(cmap='viridis', colorbar=True)

clusterer.condensed_tree_.plot()

clusterer.condensed_tree_.plot(select_clusters=True, selection_palette=sns.color_palette())

import hdbscan
hdbscan = hdbscan.HDBSCAN(min_cluster_size=145)
labels = hdbscan.fit_predict(dfs1)
hdbscan.condensed_tree_.plot(select_clusters=True)
np.unique(labels)

clusterad= pd.DataFrame(labels, columns = ['cluster'])
clusterad

clusterad.cluster.unique()

data ['cluster'] = clusterad
data.head()

AprAgscore=silhouette_score(dfs1, data.cluster)
print("AprAg:",AprAgscore)

data.to_csv(r'/content/drive/MyDrive/NSSTC/Fires/DBSCAN Final\HDBAprAg.csv', index=False)

outliers_df = data[data.cluster == -1]
clusters_df = data[data.cluster != -1]

colors = data.cluster
col_clus = colors[colors != -1]
col_outliers = 'black'

clusters = Counter(data.cluster)
print(clusters)
print(data[data.cluster==-1].head(10))
print ('Number of Clusters = {}'.format(len(clusters)-1))

fig = plt.figure()

ax = fig.add_axes([0.1, 0.1, 1,1])

ax.scatter(clusters_df['LONGITUDE'], clusters_df['LATITUDE'], c=col_clus, edgecolors = 'black', s=50)
ax.scatter(outliers_df['LONGITUDE'], outliers_df['LATITUDE'], c=col_outliers, edgecolors = 'black', s=50)


ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()

fig = plt.figure()

ax = fig.add_axes([0.1, 0.1, 1,1])

ax.scatter(clusters_df['LONGITUDE'], clusters_df['LATITUDE'], c=col_clus, edgecolors = 'black', s=50)

for i in data.cluster.unique():
    points = data[data.cluster == i][['LATITUDE', 'LONGITUDE']].values
    hull = ConvexHull(points)



ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()

fig = plt.figure()

ax = fig.add_axes([0.1, 0.1, 1,1])

ax.scatter(clusters_df['LONGITUDE'], clusters_df['LATITUDE'], c=col_clus, edgecolors = 'black', s=50)

# ax.scatter(outliers_df['LONGITUDE'], outliers_df['LATITUDE'], c=col_outliers, edgecolors = 'black', s=50)

a =data.cluster.unique()
s=np.delete(data.cluster.unique(), np.where(a == -1))

for i in s:
    points = data[data.cluster == i][['LATITUDE', 'LONGITUDE']].values

    hull = ConvexHull(points)

    vert = np.append(hull.vertices,hull.vertices[0])

    ax.plot(points[vert, 1], points[vert,0 ], '--')
    ax.fill(points[vert, 1], points[vert, 0], alpha=0.2)

ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()

fig = plt.figure()

ax = fig.add_axes([4, 4, 6, 10])

ax.scatter(clusters_df['LONGITUDE'], clusters_df['LATITUDE'], c=col_clus, edgecolors = 'black', s=70)
#ax.scatter(outliers_df['LONGITUDE'], outliers_df['LATITUDE'], c=col_outliers, edgecolors = 'black', s=50)

a =data.DBSCAN_Clusters.unique()
s=np.delete(data.DBSCAN_Clusters.unique(), np.where(a == -1))

for i in s:
    points = data[data.DBSCAN_Clusters == i][['LATITUDE', 'LONGITUDE']].values
    points = data[data.DBSCAN_Clusters == i][['LATITUDE', 'LONGITUDE']].values
    # get convex hull
    hull = ConvexHull(points)


    vert = np.append(hull.vertices, hull.vertices[0])  # close the polygon by appending the first point at the end
    ax.plot(points[vert, 1], points[vert, 0], '--')
    ax.fill(points[vert, 1], points[vert, 0], alpha=0.2)


ax.set_xlabel('LONGITUDE')
ax.set_ylabel('LATITUDE')

#plt.grid(which='major')

plt.show()